type User @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)

  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  name: String
  email: String @isUnique
  password: String

  theme: String

  posts: [Post!]! @relation(name: "UserPosts")
  comments: [Comment!]! @relation(name: "UserComments")
  postLikes: [PostLike!]! @relation(name: "UserPostLikes")
  commentLikes: [CommentLike!]! @relation(name: "UserCommentLikes")
}

type Post @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)

  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  content: String!
  comments: [Comment!]! @relation(name: "PostComments")
  likes: [PostLike!]! @relation(name: "PostLikes")
  author: User! @relation(name: "UserPosts")
}

type PostLike @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)

  post: Post @relation(name: "PostLikes")
  author: User @relation(name: "UserPostLikes")
}

type Comment @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)

  # Optional system fields (remove if not needed):
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  content: String!
  likes: [CommentLike!]! @relation(name: "CommentLikes")
  author: User @relation(name: "UserComments")
  post: Post @relation(name: "PostComments")
}

type CommentLike @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)

  comment: Comment @relation(name: "CommentLikes")
  author: User @relation(name: "UserCommentLikes")
}